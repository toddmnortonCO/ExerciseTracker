{"version":3,"sources":["Components/Header/header.js","Components/Dashboard/dashboard.js","Components/About/about.js","routes.js","App.js","serviceWorker.js","index.js"],"names":["Header","Dashboard","setState","activity","duration","distance","summary","this","state","Component","About","exact","path","component","Landing","App","className","routes","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wQAUeA,G,MARA,WACX,OACE,iCACE,mE,8DCHaC,E,kDACjB,aAAe,IAAD,8BACV,gBACKC,SAAW,CACZC,SAAU,GACVC,SAAU,GACVC,SAAU,GACVC,QAAS,IANH,E,qDAWV,OACI,iCACI,qCACKC,KAAKC,Y,GAfaC,aCUxBC,E,uKARP,OACI,mD,GAHQD,aCMlB,oBAAC,IAAD,KACE,kBAAC,IAAD,CAAOE,OAAK,EAACC,KAAK,IAAIC,UAAWC,MACjC,kBAAC,IAAD,CAAOF,KAAK,aAAaC,UAAWZ,IACpC,kBAAC,IAAD,CAAOW,KAAK,SAASC,UAAWH,KCMrBK,MATf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,MACCC,ICAaC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAD,KACI,kBAAC,EAAD,OACaC,SAASC,eAAe,SDwHrC,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.500ba541.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Header = () => {\n    return (\n      <section>\n        <h1>The Get Swoll - Exercise Tracker</h1>\n      </section>\n    );\n};\n\nexport default Header;\n","import React, { Component } from 'react';\n\nexport default class Dashboard extends Component{ \n    constructor() {\n        super();\n        this.setState = {\n            activity: '',\n            duration: '',\n            distance: '',\n            summary: ''\n        }\n    }\n\n    render(){\n        return (\n            <section>\n                <div>hello\n                    {this.state}\n                </div>\n            </section>\n        )\n    }\n}","import React, { Component } from 'react'\n\nclass About extends Component {\n    render() {\n        return (\n            <div>\n                Test Test Test\n            </div>\n        )\n    }\n}\n\nexport default About;\n\n","import React from \"react\";\nimport { Switch, Route } from \"react-router-dom\";\nimport Landing from './Components/Landing/landing';\nimport Dashboard from \"./Components/Dashboard/dashboard\";\nimport About from \"./Components/About/about\";\n\n\nexport default (\n  <Switch>\n    <Route exact path=\"/\" component={Landing} />\n    <Route path=\"/dashboard\" component={Dashboard} />\n    <Route path='/about' component={About} />\n    {/* <Route path='/donation' component={Donation} /> */} \n  </Switch>\n);\n","import React from 'react';\nimport Header from './Components/Header/header'; \nimport './App.css';\nimport routes from './routes';\n\n\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      {routes}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\n\nReactDOM.render(\n  <HashRouter>\n      <App />\n  </HashRouter>,   document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}